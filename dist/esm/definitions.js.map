{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface CapacitorVideoPlayerPlugin {\n  /**\n   * Initialize a video player\n   *\n   */\n  initPlayer(): Promise<capVideoPlayerResult>;\n\n  /**\n   * Return if a given playerId is playing\n   *\n   */\n  isPlaying(): Promise<capVideoPlayerResult>;\n\n  /**\n   * Play the current video from a given playerId\n   *\n   */\n  setVideoUrl(options: { url: string }): Promise<capVideoPlayerResult>;\n\n  playerPlay(): Promise<void>;\n\n  /**\n   * Pause the current video from a given playerId\n   *\n   */\n  playerPause(): Promise<capVideoPlayerResult>;\n\n  playerStop(): Promise<capVideoPlayerResult>;\n\n  /**\n   * Get the duration of the current video from a given playerId\n   *\n   */\n\n  /**\n   * Exit player\n   *\n   */\n  exitPlayer(): Promise<capVideoPlayerResult>;\n\n  /**\n   * Add event listeners for player events.\n   *\n   * @param eventName The name of the event to listen for.\n   * @param listenerFunc The function to call when the event is triggered.\n   */\n  addListener(\n    eventName:\n      | 'CapVideoPlayerBuffering'\n      | 'CapVideoPlayerIdle'\n      | 'CapVideoPlayerPlaying'\n      | 'CapVideoPlayerReady'\n      | 'CapVideoPlayerError'\n      | 'CapVideoPlayerEnd',\n    listenerFunc: (event: any) => void,\n  ): Promise<PluginListenerHandle>;\n}\n\nexport interface capEchoOptions {\n  /**\n   *  String to be echoed\n   */\n\n  value?: string;\n}\n\nexport interface capVideoPlayerOptions {\n  url?: string;\n  /**\n   * The url of subtitle associated with the video\n   */\n  subtitle?: string;\n  /**\n   * The language of subtitle\n   * see https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers\n   */\n  language?: string;\n  /**\n   * SubTitle Options\n   */\n  subtitleOptions?: SubTitleOptions;\n  /**\n   * Initial playing rate\n   */\n  rate?: number;\n  /**\n   * Headers for the request (iOS, Android)\n   * by Manuel García Marín (https://github.com/PhantomPainX)\n   */\n  headers?: {\n    [key: string]: string;\n  };\n  /**\n   * Title shown in the player (Android)\n   * by Manuel García Marín (https://github.com/PhantomPainX)\n   */\n  title?: string;\n  /**\n   * Subtitle shown below the title in the player (Android)\n   * by Manuel García Marín (https://github.com/PhantomPainX)\n   */\n  smallTitle?: string;\n}\n\nexport interface capVideoRateOptions {\n  /**\n   * Rate value\n   */\n  rate?: number;\n}\n\nexport interface capVideoVolumeOptions {\n  /**\n   * Volume value between [0 - 1]\n   */\n  volume?: number;\n}\n\nexport interface capVideoTimeOptions {\n  /**\n   * Video time value you want to seek to\n   */\n  seektime?: number;\n}\n\nexport interface capVideoMutedOptions {\n  /**\n   * Muted value true or false\n   */\n  muted?: boolean;\n}\n\nexport interface capVideoListener {\n  /**\n   * Video current time when listener trigerred\n   */\n  currentTime?: number;\n}\n\nexport interface capExitListener {\n  /**\n   * Dismiss value true or false\n   */\n  dismiss?: boolean;\n  /**\n   * Video current time when listener trigerred\n   */\n  currentTime?: number;\n}\n\nexport interface capVideoPlayerResult {\n  /**\n   * result set to true when successful else false\n   */\n  result?: boolean;\n  /**\n   * method name\n   */\n  method?: string;\n  /**\n   * value returned\n   */\n  value?: any;\n  /**\n   * message string\n   */\n  message?: string;\n}\n\nexport interface SubTitleOptions {\n  /**\n   * Foreground Color in RGBA (default rgba(255,255,255,1)\n   */\n  foregroundColor?: string;\n  /**\n   * Background Color in RGBA (default rgba(0,0,0,1)\n   */\n  backgroundColor?: string;\n  /**\n   * Font Size in pixels (default 16)\n   */\n  fontSize?: number;\n}\n"]}